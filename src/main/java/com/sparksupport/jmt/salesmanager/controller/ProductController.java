package com.sparksupport.jmt.salesmanager.controller;

import com.sparksupport.jmt.salesmanager.entity.Product;
import com.sparksupport.jmt.salesmanager.service.ProductService;
import com.sparksupport.jmt.salesmanager.service.SaleService;
import jakarta.validation.Valid;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.security.access.annotation.Secured;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.web.bind.annotation.*;


@RestController
@RequestMapping("/product")
public class ProductController {

    @Autowired
    private ProductService productService;

    @Autowired
    private SaleService saleService;


    /**
     * Handles GET requests to retrieve a paginated list of all products.
     *
     * @param pageable Object representing pagination information.
     * @return ResponseEntity containing a page of products and HTTP status OK if successful.
     */
    @Secured("ROLE_ADMIN")
    @PreAuthorize("hasAuthority('ROLE_ADMIN')")
    @GetMapping("/list")
    public ResponseEntity<Page<Product>> getAllProducts(Pageable pageable){
        Page<Product> products = productService.getAllProducts(pageable);
        return new ResponseEntity<>(products, HttpStatus.OK);
    }

    /**
     * Handles GET requests to retrieve a specific product by its ID.
     *
     * @param id ID of the product to be retrieved.
     * @return ResponseEntity containing the product and HTTP status OK if successful.
     */
    @Secured("ROLE_ADMIN")
    @PreAuthorize("hasAuthority('ROLE_ADMIN')")
    @GetMapping("/{id}")
    public ResponseEntity<Product> getProductById(@PathVariable("id") Long id){
        Product product = productService.getProductById(id);
        return new ResponseEntity<>(product, HttpStatus.OK);
    }

    /**
     * Handles POST requests to add a new product.
     *
     * @param product Product object to be added.
     * @return ResponseEntity containing the added product and HTTP status CREATED if successful.
     */
    @Secured("ROLE_ADMIN")
    @PreAuthorize("hasAuthority('ROLE_ADMIN')")
    @PostMapping("/add")
    public ResponseEntity<Product> addProduct(@Valid @RequestBody Product product){
        productService.addProduct(product);
        return new ResponseEntity<>(product, HttpStatus.CREATED);
    }

    /**
     * Handles PUT requests to update an existing product by its ID.
     *
     * @param id ID of the product to be updated.
     * @param product Updated Product object.
     * @return ResponseEntity containing the updated product and HTTP status OK if successful.
     */
    @Secured("ROLE_ADMIN")
    @PreAuthorize("hasAuthority('ROLE_ADMIN')")
    @PutMapping("/update/{id}")
    public ResponseEntity<Product> updateProduct(@Valid @PathVariable Long id, @RequestBody Product product){
        productService.updateProduct(id, product);
        return new ResponseEntity<>(product, HttpStatus.OK);
    }

    /**
     * Handles DELETE requests to delete a product by its ID.
     *
     * @param id ID of the product to be deleted.
     * @return ResponseEntity with a success message and HTTP status OK if successful.
     */
    @Secured("ROLE_ADMIN")
    @PreAuthorize("hasAuthority('ROLE_ADMIN')")
    @DeleteMapping("/delete/{id}")
    public ResponseEntity<String> deleteProduct(@PathVariable Long id){
        productService.deleteProduct(id);
        return new ResponseEntity<>("Deleted Successfully", HttpStatus.OK);
    }

    /**
     * Handles GET requests to retrieve the total revenue generated by a specific product.
     *
     * @param productId ID of the product for which revenue needs to be calculated.
     * @return ResponseEntity containing the revenue and HTTP status OK if successful.
     */
    @Secured("ROLE_ADMIN")
    @PreAuthorize("hasAuthority('ROLE_ADMIN')")
    @GetMapping("/revenue/{productId}")
    public ResponseEntity<Double> getRevenueByProduct(@PathVariable Long productId){
        double sale = productService.getRevenueByProduct(productId);
        return new ResponseEntity<>(sale, HttpStatus.OK);
    }

    /**
     * Handles GET requests to retrieve the total revenue generated by all products.
     *
     * @return ResponseEntity containing the total revenue and HTTP status OK if successful.
     */
    @Secured("ROLE_ADMIN")
    @PreAuthorize("hasAuthority('ROLE_ADMIN')")
    @GetMapping("/totalRevenue")
    public ResponseEntity<Double> getTotalRevenue(){
        double product = productService.getTotalRevenue();
        return new ResponseEntity<>(product, HttpStatus.OK);
    }

}
